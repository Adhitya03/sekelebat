"use strict";var printWarning=function(){};if(process.env.NODE_ENV!=="production"){var ReactPropTypesSecret=require("./lib/ReactPropTypesSecret");var loggedTypeFailures={};var has=Function.call.bind(Object.prototype.hasOwnProperty);printWarning=function(c){var b="Warning: "+c;if(typeof console!=="undefined"){console.error(b)}try{throw new Error(b)}catch(a){}}}function checkPropTypes(b,j,i,f,a){if(process.env.NODE_ENV!=="production"){for(var d in b){if(has(b,d)){var g;try{if(typeof b[d]!=="function"){var c=Error((f||"React class")+": "+i+" type `"+d+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof b[d]+"`.");c.name="Invariant Violation";throw c}g=b[d](j,d,f,i,null,ReactPropTypesSecret)}catch(e){g=e}if(g&&!(g instanceof Error)){printWarning((f||"React class")+": type specification of "+i+" `"+d+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof g+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).")}if(g instanceof Error&&!(g.message in loggedTypeFailures)){loggedTypeFailures[g.message]=true;var h=a?a():"";printWarning("Failed "+i+" type: "+g.message+(h!=null?h:""))}}}}}checkPropTypes.resetWarningCache=function(){if(process.env.NODE_ENV!=="production"){loggedTypeFailures={}}};module.exports=checkPropTypes;